<html>
<head>
  <title>ulf</title>
  <style>
    body{margin:0;}
    canvas{ width:100%; height: 100%;}
    #data{color: white; position: absolute;}
  </style>
</head>
<body>
  <script src="https://cdn.socket.io/socket.io-1.3.4.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/threejs/r69/three.min.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/mathjs/1.2.0/math.min.js"></script>
  <script src="scripts/mathFunctions.js"></script>
  <script src="scripts/geometry.js"></script>
  <script src="scripts/constants.js"></script>
  <script src="scripts/thrustPD.js"></script>
  <script src="scripts/positionCalculation.js"></script>
  <script src="scripts/flightControl.js"></script>
  <script>
    var getJSON = function(url, successHandler, errorHandler) {
      var xhr = typeof XMLHttpRequest != 'undefined'
        ? new XMLHttpRequest()
        : new ActiveXObject('Microsoft.XMLHTTP');
      xhr.open('get', url, true);
      xhr.onreadystatechange = function() {
        var status;
        var data;
        // https://xhr.spec.whatwg.org/#dom-xmlhttprequest-readystate
        if (xhr.readyState == 4) { // `DONE`
          status = xhr.status;
          if (status == 200) {
            data = JSON.parse(xhr.responseText);
            successHandler && successHandler(data);
          } else {
            errorHandler && errorHandler(status);
          }
        }
      };
      xhr.send();
    };
    var user;
    var socket = io();
    socket.on('user id', function(id){
      console.log(id)
      user = id;
      var scene = new THREE.Scene();
      var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );

      var renderer = new THREE.WebGLRenderer();
      renderer.setSize( window.innerWidth, window.innerHeight );
      document.body.appendChild( renderer.domElement );

      var copterPositions = [];
      var copters = [];

      getJSON('/copters', function(data){
        copterPositions = data;
      }, function(err){
        console.error(err);
      });

      var copter = new Copter();
      copters.push(copter);
      copterPositions.push(copter.getPosition());
      scene.add(copter.object);
      for(var i = 0; i < copterPositions.length-1; i++){
        var temp = new Copter(false);
        temp.setPosition(copterPositions[i]);
        copters.push(temp);
        scene.add(temp.object);
      }

      var first = true;
      debugger
      socket.emit('add copter', {copter: copter.getPosition(), user: user});
      socket.on('add copter', function(c){
        if(first){
          first = false;
        }else{
          copterPositions.push(c);
          var temp = new Copter(false);
          temp.setPosition(c);
          copters.push(temp);
          scene.add(temp.object);
        }
      });
      socket.on('update copter', function(positions){
        copterPositions = positions;
      });

      camera.position.z = 5;
      camera.position.y = 2;
      var clock =  new THREE.Clock();
        copter.object.position.y = copter.positionInertial._data[1][0];
      var first = true;
      var render = function () {
        delta = clock.getDelta();
        requestAnimationFrame( render );
        // Update velocities and rotations
        socket.emit('update copter', {copter: copter.update(0.01), user: user});
        for(var i = 0; i < copters.length; i++){
          copters[i].setPosition(copterPositions[i]);
        }

        renderer.render(scene, camera);
      };

      render();
    });
    </script>
</body>
</html>
